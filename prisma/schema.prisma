
// Necessary for Next auth
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  @db.Text
    access_token             String?  @db.Text
    expires_at               Int?
    refresh_token_expires_in Int? // Github wants this.
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    votes         Vote[]
    polls         Poll[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Vote {
    id       String  @id @default(cuid())
    user     User    @relation(fields: [userId], references: [id])
    userId   String
    option   Option  @relation(fields: [optionId], references: [id])
    optionId String
    Poll     Poll?   @relation(fields: [pollId], references: [id], onDelete: Cascade)
    pollId   String?
}

model Option {
    id     String @id @default(cuid())
    title  String @db.Text
    poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
    pollId String
    votes  Vote[]
}

model Poll {
    id          String   @id @default(cuid())
    title       String   @db.Text
    description String?  @db.Text
    creator     User     @relation(fields: [creatorId], references: [id])
    creatorId   String
    options     Option[]
    votes       Vote[]
}
